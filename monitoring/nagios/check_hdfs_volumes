#!/usr/bin/env python
import subprocess
import sys
import os
import StringIO
import optparse
import datetime
import time
import requests
import simplejson as json


# _ CONSTS
TIMEOUT = 5


def unix_time(dt):
    epoch = datetime.datetime.utcfromtimestamp(0)
    delta = dt - epoch
    return delta.total_seconds()


def unix_time_millis(dt):
    return unix_time(dt) * 1000.0


def print_and_exit(msg, status):
    """ Parse and print msg, and exit w/status. """
    code = 'UNKNOWN'
    #_ Check for current threshold.
    if status == 0:
        code = 'OK'
    if status == 1:
        code = 'WARNING'
    if status == 2:
        code = 'CRITICAL'

    if msg:
        if isinstance(msg, list):
            print 'DataNode Volumes {} - {}'.format(code, ','.join(msg))
        else:
            print 'DataNode Volumes {} - {}'.format(code, msg)
    else:
        print 'DataNode Volumes {}'.format(code)
    sys.exit(status)


def set_status(current,new):
    """ Set status if new exit code > current. """
    if new > current:
        current = new
    return current


def get_json(url):
    """ Request URL, load JSON, exit if error. """
    url_json = None
    try:
        r = requests.get(url, timeout=TIMEOUT)
    except Exception, e:
        print_and_exit('Unable to query url - {}'.format(url, e), 4)

    if r.status_code == 200:
        try:
            url_json = r.json()
        except Exception:
            print_and_exit('Could not load JSON for {}'.format(url), 4)
    else:
        print_and_exit('Did not recieve 200 response for {}'.format(url), 4)
    return url_json


def compare_metric(status, warn, crit, metric):
    """ Compare a metric against warn / crit. Set msg
    and exit status based on result. """
    exit_status = None

    if metric >= warn:
        if metric >= crit:
            exit_status = 2
        else:
            exit_status = 1
    else:
        exit_status = 0
    return exit_status


def main():
    #_ Consts
    SERVICE='DataNode'
    BEAN='FSDatasetState-'

    #_ Variables
    failed_dirs = None
    active_dirs = None
    exit_status = 0
    elapsed = None
    image_found = False
    jmx_json = {}
    exit_msg = []

    #_ Parse Options
    parser = optparse.OptionParser()
    parser.add_option('-c', '--critical', type='int', default=90, dest='dfs_pct_used_crit',  help='Space used warning')
    parser.add_option('-w', '--warning', type='int', default=80, dest='dfs_pct_used_warn',  help='Space used critical')
    parser.add_option('-H', '--host', default='localhost', dest='host',  help='Host')
    parser.add_option('-p', '--port', default='50075', dest='port',  help='Port')
    (opts, args) = parser.parse_args()

    #_ Get dfsadmin report
    jmx_json = get_json('http://{}:{}/jmx?qry=Hadoop:service={},name={}*'.format(opts.host, opts.port, SERVICE, BEAN))

    #_ If we have valid JSON, proceed
    if jmx_json:
        #_ If our JSON contains data, proceed.
        if 'beans' in jmx_json:
            if 'NumFailedVolumes' in jmx_json['beans'][0]:
                status = jmx_json['beans'][0]
                dfs_total_bytes = status['Capacity']
                dfs_used_bytes = status['DfsUsed']
                dfs_free_bytes = status['Remaining']
                dfs_pct_used = int((float(dfs_used_bytes) / float(dfs_total_bytes) * 100))
                dfs_failed_volumes = status['NumFailedVolumes']
            else:
                print_and_exit('Could not find DataNode metrics', 4)
        else:
            print_and_exit('Could not find MBean in JSON', 4)
    else:
        print_and_exit('Unable to parse JSON', 4)

    #_ Validate available directories
    if dfs_pct_used >= opts.dfs_pct_used_warn:
        if dfs_pct_used >= opts.dfs_pct_used_crit:
            exit_status = set_status(exit_status,2)
        else:
            exit_status = set_status(exit_status,1)
    exit_msg.append('{}% of {}Gb used'.format(dfs_pct_used, int(float(dfs_total_bytes / 1024.0 / 1024.0 / 1024.0))))

    #_ Print message & exit
    print_and_exit(exit_msg, exit_status)


if __name__ == '__main__':
    main()
